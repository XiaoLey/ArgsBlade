name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  test:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: ls
      run: ls

    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_FLAGS=--coverage -DCMAKE_C_FLAGS=--coverage

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} --extra-verbose

#    - name: Run lcov
#      # You may pin to the exact commit or the version.
#      # uses: imciner2/run-lcov@2aa8bf45a1ee890d86d8fca672b87a1cb3e03757
#      uses: imciner2/run-lcov@v1
#      with:
#        # Directory to search for coverage info files
#        input_directory: ${{github.workspace}}/build/coverage
#        # Output file for coverage results
#        output_file: # default is coverage.info
#
#    - name: Codecov
#          - uses: codecov/codecov-action@v2
#            with:
#              files: ./coverage.info
#              flags: unittests
#              name: ArgsBlade-codecov
#              fail_ci_if_error: true # optional (default = false)
#              verbose: true # optional (default = false)
